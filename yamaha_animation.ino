#include "ACS712.h"
#include <FastLED.h>
#include <microsmooth.h>

#include "ParalelTimer.h"

#include <ColorTransaction.h>
#include <Smoothed.h>   // Include the library
Smoothed <int> mySensor; 

#define LED_PIN     6
#define NUM_LEDS    54
#define BRIGHTNESS  100
#define LED_TYPE    WS2812
#define COLOR_ORDER GRB


CRGB leds[NUM_LEDS];
ColorTransaction transactions[NUM_LEDS];

ParalelTimer timer = ParalelTimer(500);
#define UPDATES_PER_SECOND 100

const byte theme[600][3] PROGMEM = 
{
  {12,12,12},
  {24,24,24},
  {36,36,36},
  {48,48,48},
  {60,60,60},
  {73,73,73},
  {86,86,86},
  {99,99,99},
  {112,112,112},
  {125,125,125},
  {138,138,138},
  {151,151,151},
  {164,164,164},
  {177,177,177},
  {190,190,190},
  {203,203,203},
  {216,216,216},
  {229,229,229},
  {242,242,242},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {255,255,255},
  {252,255,255},
  {249,255,255},
  {246,255,255},
  {243,255,255},
  {240,255,255},
  {237,255,255},
  {234,255,255},
  {231,255,255},
  {228,255,255},
  {225,255,255},
  {222,255,255},
  {219,255,255},
  {216,255,255},
  {213,255,255},
  {210,255,255},
  {207,255,255},
  {204,255,255},
  {201,255,255},
  {198,255,255},
  {195,255,255},
  {192,255,255},
  {189,255,255},
  {186,255,255},
  {183,255,255},
  {180,255,255},
  {177,255,255},
  {174,255,255},
  {171,255,255},
  {168,255,255},
  {165,255,255},
  {162,255,255},
  {159,255,255},
  {156,255,255},
  {153,255,255},
  {150,255,255},
  {147,255,255},
  {144,255,255},
  {141,255,255},
  {138,255,255},
  {135,255,255},
  {132,255,255},
  {129,255,255},
  {126,255,255},
  {123,255,255},
  {120,255,255},
  {117,255,255},
  {114,255,255},
  {111,255,255},
  {108,255,255},
  {105,255,255},
  {102,255,255},
  {99,255,255},
  {96,255,255},
  {93,255,255},
  {90,255,255},
  {87,255,255},
  {84,255,255},
  {81,255,255},
  {78,255,255},
  {75,255,255},
  {72,255,255},
  {69,255,255},
  {66,255,255},
  {63,255,255},
  {60,255,255},
  {56,255,255},
  {52,255,255},
  {48,255,255},
  {44,255,255},
  {40,255,255},
  {36,255,255},
  {32,255,255},
  {28,255,255},
  {24,255,255},
  {20,255,255},
  {16,255,255},
  {12,255,255},
  {8,255,255},
  {4,255,255},
  {0,255,255},
  {2,255,253},
  {4,255,251},
  {6,255,249},
  {8,255,247},
  {10,255,245},
  {12,255,243},
  {14,255,241},
  {16,255,239},
  {18,255,237},
  {20,255,235},
  {22,255,233},
  {24,255,231},
  {26,255,229},
  {28,255,227},
  {30,255,225},
  {32,255,223},
  {34,255,221},
  {36,255,219},
  {38,255,217},
  {40,255,215},
  {42,255,213},
  {44,255,211},
  {46,255,209},
  {48,255,207},
  {50,255,205},
  {52,255,203},
  {54,255,201},
  {56,255,199},
  {58,255,197},
  {60,255,195},
  {62,255,193},
  {64,255,191},
  {66,255,189},
  {68,255,187},
  {70,255,185},
  {72,255,183},
  {74,255,181},
  {76,255,179},
  {78,255,177},
  {80,255,175},
  {82,255,173},
  {84,255,171},
  {86,255,169},
  {88,255,167},
  {90,255,165},
  {93,255,162},
  {96,255,159},
  {99,255,156},
  {102,255,153},
  {105,255,150},
  {108,255,147},
  {111,255,144},
  {114,255,141},
  {117,255,138},
  {120,255,135},
  {123,255,132},
  {126,255,129},
  {129,255,126},
  {132,255,123},
  {135,255,120},
  {138,255,117},
  {141,255,114},
  {144,255,111},
  {147,255,108},
  {150,255,105},
  {153,255,102},
  {156,255,99},
  {159,255,96},
  {162,255,93},
  {165,255,90},
  {168,255,87},
  {171,255,84},
  {174,255,81},
  {177,255,78},
  {180,255,75},
  {183,255,72},
  {186,255,69},
  {189,255,66},
  {192,255,63},
  {195,255,60},
  {198,255,57},
  {201,255,54},
  {204,255,51},
  {207,255,48},
  {210,255,45},
  {213,255,42},
  {216,255,39},
  {219,255,36},
  {222,255,33},
  {225,255,30},
  {228,255,27},
  {231,255,24},
  {234,255,21},
  {237,255,18},
  {240,255,15},
  {243,255,12},
  {246,255,9},
  {249,255,6},
  {252,255,3},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,255,0},
  {255,254,0},
  {255,253,0},
  {255,252,0},
  {255,251,0},
  {255,250,0},
  {255,249,0},
  {255,248,0},
  {255,247,0},
  {255,246,0},
  {255,245,0},
  {255,244,0},
  {255,243,0},
  {255,242,0},
  {255,241,0},
  {255,240,0},
  {255,239,0},
  {255,238,0},
  {255,237,0},
  {255,236,0},
  {255,235,0},
  {255,234,0},
  {255,233,0},
  {255,232,0},
  {255,231,0},
  {255,230,0},
  {255,229,0},
  {255,228,0},
  {255,227,0},
  {255,226,0},
  {255,225,0},
  {255,224,0},
  {255,223,0},
  {255,222,0},
  {255,221,0},
  {255,220,0},
  {255,219,0},
  {255,218,0},
  {255,217,0},
  {255,216,0},
  {255,215,0},
  {255,214,0},
  {255,213,0},
  {255,212,0},
  {255,211,0},
  {255,210,0},
  {255,209,0},
  {255,208,0},
  {255,207,0},
  {255,206,0},
  {255,205,0},
  {255,204,0},
  {255,203,0},
  {255,202,0},
  {255,201,0},
  {255,200,0},
  {255,199,0},
  {255,198,0},
  {255,197,0},
  {255,196,0},
  {255,195,0},
  {255,194,0},
  {255,193,0},
  {255,192,0},
  {255,191,0},
  {255,190,0},
  {255,189,0},
  {255,188,0},
  {255,187,0},
  {255,186,0},
  {255,185,0},
  {255,184,0},
  {255,183,0},
  {255,182,0},
  {255,181,0},
  {255,180,0},
  {255,179,0},
  {255,178,0},
  {255,177,0},
  {255,176,0},
  {255,175,0},
  {255,174,0},
  {255,173,0},
  {255,172,0},
  {255,171,0},
  {255,170,0},
  {255,169,0},
  {255,168,0},
  {255,167,0},
  {255,166,0},
  {255,165,0},
  {255,164,0},
  {255,163,0},
  {255,162,0},
  {255,161,0},
  {255,160,0},
  {255,159,0},
  {255,158,0},
  {255,157,0},
  {255,156,0},
  {255,155,0},
  {255,154,0},
  {255,153,0},
  {255,152,0},
  {255,151,0},
  {255,150,0},
  {255,149,0},
  {255,148,0},
  {255,147,0},
  {255,146,0},
  {255,145,0},
  {255,144,0},
  {255,143,0},
  {255,142,0},
  {255,141,0},
  {255,140,0},
  {255,139,0},
  {255,138,0},
  {255,137,0},
  {255,136,0},
  {255,135,0},
  {255,134,0},
  {255,133,0},
  {255,132,0},
  {255,131,0},
  {255,130,0},
  {255,128,0},
  {255,126,0},
  {255,124,0},
  {255,122,0},
  {255,120,0},
  {255,118,0},
  {255,116,0},
  {255,114,0},
  {255,112,0},
  {255,110,0},
  {255,108,0},
  {255,106,0},
  {255,104,0},
  {255,102,0},
  {255,100,0},
  {255,98,0},
  {255,96,0},
  {255,94,0},
  {255,92,0},
  {255,90,0},
  {255,88,0},
  {255,86,0},
  {255,84,0},
  {255,82,0},
  {255,80,0},
  {255,78,0},
  {255,76,0},
  {255,74,0},
  {255,72,0},
  {255,70,0},
  {255,68,0},
  {255,66,0},
  {255,64,0},
  {255,62,0},
  {255,60,0},
  {255,58,0},
  {255,56,0},
  {255,54,0},
  {255,52,0},
  {255,50,0},
  {255,48,0},
  {255,46,0},
  {255,44,0},
  {255,42,0},
  {255,40,0},
  {255,38,0},
  {255,36,0},
  {255,34,0},
  {255,32,0},
  {255,30,0},
  {255,28,0},
  {255,26,0},
  {255,24,0},
  {255,22,0},
  {255,20,0},
  {255,18,0},
  {255,16,0},
  {255,14,0},
  {255,12,0},
  {255,10,0},
  {255,8,0},
  {255,6,0},
  {255,4,0},
  {255,2,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
  {255,0,0},
};


ACS712  ACS(A0, 5.0, 1023, 100);
int level = 0;
int maxLevel = 1000;
//extern const TProgmemPalette16 palette PROGMEM;

uint16_t *ptr1;

CRGBPalette16 palette ;

bool isOn = false;

void setup()
{
  Serial.begin(115200);
  Serial.println(__FILE__);
 ptr1 = ms_init(EMA);
  ACS.autoMidPoint();

  ColorTransaction transaction;
  int steps = 20;
  int index = 0;
  transaction.ToColor(CRGB::Black, CRGB::White , steps);
  for(int i = 0; i< steps; i++)
  {
       transaction.NextFrame();
       Serial.print("{");
       Serial.print(transaction.CurrentColor.r);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.g);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.b);
       Serial.println("},");
       index++;
  }

  steps = 100;
  transaction.ToColor(CRGB::White, CRGB::White , steps);
  for(int i = 0; i< steps; i++)
  {
       transaction.NextFrame();
       Serial.print("{");
       Serial.print(transaction.CurrentColor.r);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.g);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.b);
       Serial.println("},");
       index++;
  }

  steps = 80;
  transaction.ToColor(CRGB::White, CRGB::Aqua , steps);
  for(int i = 0; i< steps; i++)
  {
       transaction.NextFrame();
       Serial.print("{");
       Serial.print(transaction.CurrentColor.r);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.g);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.b);
       Serial.println("},");
       index++;
  }

  steps = 100;
  transaction.ToColor(CRGB::Aqua, CRGB::Yellow , steps);
  for(int i = 0; i< steps; i++)
  {
       transaction.NextFrame();
       Serial.print("{");
       Serial.print(transaction.CurrentColor.r);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.g);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.b);
       Serial.println("},");
       index++;
  }

  
  steps = 100;
  transaction.ToColor(CRGB::Yellow, CRGB::Orange , steps);
  for(int i = 0; i< steps; i++)
  {
       transaction.NextFrame();
       Serial.print("{");
       Serial.print(transaction.CurrentColor.r);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.g);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.b);
       Serial.println("},");
       index++;
  }

  steps = 100;
  transaction.ToColor(CRGB::Orange, CRGB::Red , steps);
  for(int i = 0; i< steps; i++)
  {
       transaction.NextFrame();
       Serial.print("{");
       Serial.print(transaction.CurrentColor.r);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.g);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.b);
       Serial.println("},");
       index++;
  }

  steps = 100;
  transaction.ToColor(CRGB::Red, CRGB::Red , steps);
  for(int i = 0; i< steps; i++)
  {
       transaction.NextFrame();
       Serial.print("{");
       Serial.print(transaction.CurrentColor.r);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.g);
       Serial.print(",");
       Serial.print(transaction.CurrentColor.b);
       Serial.println("},");
       index++;
  }

  mySensor.begin(SMOOTHED_AVERAGE, 10);  

 FastLED.addLeds<LED_TYPE, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection( TypicalLEDStrip );
 FastLED.setBrightness(  255 );
   level = ACS.mA_AC();
}
int test = 0;


int gate = 40;
int delta = 5;

int temp = 0;
void loop()
{


  
  int mA = ema_filter(ACS.mA_AC(), ptr1);
  
  if ((level + gate) < mA)
  {
      level+=delta;  
  }
  
  if (mA < (level - gate))
  {
      level-=delta;  
  }

  if (timer.ItsTime())
  {
    if (isOn)
    {
      if (level < 420)
      {
        isOn = false;
        Serial.println("off");
        
        turnOff();
      }
    }else
    {
      if (level > 420)
      {
        isOn = true;  

        turnOn();
        Serial.println("on");
      }  
    }
  }

if (level > 420 && isOn)
{
    if (level > maxLevel)
    {
        level = maxLevel;  
    }
    
    for( int i = 0; i < NUM_LEDS; ++i) {
        leds[i].r = pgm_read_byte_near(&theme[map(level, 400, maxLevel+100, 0, 600)][0]);
        leds[i].g = pgm_read_byte_near(&theme[map(level, 400, maxLevel+100, 0, 600)][1]);
        leds[i].b = pgm_read_byte_near(&theme[map(level, 400, maxLevel+100, 0, 600)][2]);
    }
}

  for (int i = 0; i < NUM_LEDS; i++) 
  {
    if (transactions[i].InAnimation())
    {
       
        transactions[i].NextFrame();
        leds[i]=transactions[i].CurrentColor;
    }
  }
    FastLED.show();
}
byte indexes1[] = {49, 50, 51, 52, 53, 54, 55, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
byte indexes2[] = {48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21};
int animationSteps = 5;
void turnOn()
{
 
       for( int i = 0; i <=27; i++) {
            transactions[indexes1[i]].ToColor(leds[indexes1[i]], CRGB::White , animationSteps, i);
            transactions[indexes2[i]].ToColor(leds[indexes2[i]], CRGB::White , animationSteps, i);
            
       }
}

void turnOff()
{
 
       for( int i = 0; i <=27; i++) {
            transactions[indexes1[27-i]].ToColor(leds[indexes1[27-i]], CRGB::Black , animationSteps, i);
            transactions[indexes2[27-i]].ToColor(leds[indexes2[27-i]], CRGB::Black , animationSteps, i);
       }
}
